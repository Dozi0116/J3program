正規表現

XやYはstringの文字列的な間隔として扱う。
基本的に、正規表現には次の3つの役割がある。
連結:　　　XY
選択:　　　X|Y
繰り返し:　X*
ただし、()をつけることで、優先的に働く。

*は0回以上の繰り返しを表す。よって、「」に"a*"を入れると反応してしまう。
ここで、"aa*"と書くことによって、a+aの0回以上の繰り返し=1回以上の繰り返しとなる。
("a+"と書けば、1回以上の繰り返しになる。)

例:　1文字目がaかb、2文字目がc、3文字目がdかeを探す
→a|bcd|e
(a|b)c(d|e)でもよいが、記号類は直前のものにしか働かないため、上の書き方でもOK


メタキャラクタ

エスケープ文字
*や\などの記号には特別な意味が決められているため、単体で使うと文字として認識されず、
特殊記号として認識される。

そこで、'\'を用いることによって、次は文字として認識できるようにする。
例) 「a\*b」という文字列を探したい
→"a\\\*b"

オートマトンで考えてみる
        b  ↓─┐
  a    ┌-> 2 ┘ b
0 -> 1 ┤　a↑↓b
       └─> 3! ┐ a
        a　 ↑─┘        こんな感じのやつ。

決定性有限オートマトン(DFA):　　ある入力に対して、遷移先が一つになるもの。
非決定性有限オートマトン(NFA):　ある入力に対して、遷移先が一つではないもの。

NFAの例
　　　 a
　　　↓─┐ a
0 -> 1 ┼─> 2
     ↑─┘
      b               こんな感じのやつ。状態1の時にaだと遷移先が1つではなくなってしまう

NFAはバックトラック法という方法(とりあえず進んで、失敗したら戻ってやり直し)で、
DFAにすることができる。

なぜNFAは存在するのか？
とにかく、DFAを作るのは難しい！　3状態くらいの簡単なものであれば作れるが、
10000状態くらいになってしまうと気が遠くなるような作業になってしまう。

そこで、NFAという中間のものを作り、アルゴリズムに任せることによって、パソコンにDFAを
作らせることになる。


upsilon-transition(イプシロン遷移)

  ★     a
　┌ → 2 → 3
1 ┤
  └ → 4 → 5
  b     a

1にいる状態で「a」が入力されたら、★印のところは条件なしに進めるため、一気に3まで進める。
通常、★印はイプシロン記号で書く。

プログラムも順接、分岐、繰り返しの3つの要素で構成されている。
つまり、正規表現でも様々なものを表せる！


正規表現5つの要素

空に対して、　1(開始) -> 2(終了)
　　　               ★

文字'c'に対して、　1 -> 2
                    c

ある文字列X,Yに対して、　1 -> X -> Y -> 2

X,Yの分岐
　 ★　 　★
  ┌ -> X ┐
1 ┤      ├ -> 2
　└ -> Y ┘
  ★     ★

Xの繰り返し
      ★
　　　↓─┐
1 -> X ┴ -> 2
  ★       ★


a(a|b)*aに対するNFA
　　　　　　　　★
          ↓──────────────┐
　a　　★　 ├─ → 4 → 5 ┐　  │
1 → 2 → 3 ┤　　　　　 ├─ → 8　 ┌─ → 9 → 10
        │ └─ → 6 → 7 ┘　　　　│
        └────────────────────┘
        　　　　　★
